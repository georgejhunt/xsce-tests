#!/bin/bash -x
# Perform the following tests:
# - dhcpd - done by connect script
# - httpd
# - moodle: access to login
# - munin: access to login
# - ajenti: access
# - ejabberd: access to login
# - xovis: access
# - activity-server
# - Kalite
# - kiwix
# - owncloud
# - elgg
# - pathagar
# - dns: ping schoolserver, ping
# - idmgr
# - Authserver shows registration
# - squid: caching (filtering is off by default)
# - dansguardian: filtering
# - backup: does a backup
# - samba
# - IIAB: main page and several items of content.
#   content will fail if not present

# ToDo

# - monit
# - openvpn
# - vnstat

# default to gateway mode
testmode="gateway"
# except in appliance mode, let server's dns resolve schoolserver's name
sed -i -e '/.*schoolserver.*/ d' /etc/hosts
if [ $# -gt 0 ];then
  if [ "$1" == "appliance" ];then
    # add an entry to hosts for schoolserver ip address
    testmode="appliance"
    if [ "$2" ]; then
      echo "$2   schoolserver schoolserver.lan" >>/etc/hosts
    fi
  else
    if [ "$1" == "lan-controller" ]; then
      source ./lan-controller
    fi
  fi
fi

# Are we running on an XO platform
if [ -f /proc/device-tree/mfg-data/MN ]
then
  XO_VERSION=`cat /proc/device-tree/mfg-data/MN`
else
  XO_VERSION="none"
fi

# Define colors for results
NORMAL=$(tput sgr0)
GREEN=$(tput setaf 2; tput bold)
YELLOW=$(tput setaf 3)
RED=$(tput setaf 1)
LOGFILE=test_results.csv

function red() {
    echo -e "$RED$*$NORMAL"
}

function green() {
    echo -e "$GREEN$*$NORMAL"
}

function yellow() {
    echo -e "$YELLOW$*$NORMAL"
}

function log() {
 echo -n "$1,$2," >> $LOGFILE
}

# dhcpd - verify
function ip_range() {
echo -n "[XSCE] Test got address from server ..."
if `ifconfig | grep -q 172.18`
  then
      log dhcpd OK
      green OK
  else
      log dhcpd FAILED
      red FAILED!
fi
}

# - dns: ping schoolserver, translate.google.com
function test_dns() {
echo -n "[XSCE] Test resolve schoolserver ..."
if `ping -c 1 schoolserver | grep unknown`
  then
      log ping_schoolserver FAILED
      red FAILED!
  else
      log ping_schoolserver OK
      green OK
fi
}
function test_external_dns() {
echo -n "[XSCE] Test resolve translate.google.com ..."
if `ping -c 1 translate.google.com | grep unknown`
  then
      log dns_external FAILED
      red FAILED!
  else
      log dns_external OK
      green OK
fi
}

# - httpd: access home page
function test_httpd() {
echo -n "[XSCE] Test schoolserver http access..."
if `curl -Is http://schoolserver | grep -is "Location: http://schoolserver/xs-portal" > /dev/null`
then
      log httpd OK
    green OK
    else
      log httpd FAILED
    red FAILED!
fi
}


# - idmgr

function test_idmgr() {
echo -n "[XSCE] Test idmgr registration..."
su - olpc -c "python /home/olpc/testing/idmgr-test.py >/home/olpc/testing/idmgr-test.result"
rc=`cat /home/olpc/testing/idmgr-test.result`

if [ "$rc" == "OK" ]
then
      log idmgr_registration OK
    green OK
    else
      log idmgr_registration FAILED
    red FAILED!
fi
}

function test_registration() {
echo -n "[XSCE] Test if xo is registered via Authserver..."
if `wget -qO - http://schoolserver:5000/  | grep -is "SHF00000000" > /dev/null`
then
      log authserver OK
    green OK
    else
      log authserver FAILED
    red FAILED!
fi

}

# squid
function test_squid_cache() {
echo -n "[XSCE] Test squid proxy settings..."
if `curl -Is http://one.laptop.org//sites/default/files/charlotte2.jpg | grep X-Cache | grep -q schoolserver`
then
      log squid OK
    green OK
    else
      log squid FAILED
    red FAILED!
fi

echo -n "[XSCE] Test squid proxy caching settings..."
if `curl -Is http://one.laptop.org//sites/default/files/charlotte2.jpg | grep X-Cache | grep schoolserver | grep -q HIT`
then
      log squid_cache OK
    green OK
    else
      log squid_cache FAILED
    red FAILED!
fi
}

# - dansguardian
function test_dansguardian() {
echo -n "[XSCE] Test dansguardian settings..."
if `wget -qO - http://www.pornhub.com | grep -is dansguardian > /dev/null`
then
      log dansguardian OK
    green OK
    else
      log dansguardian FAILED
    red FAILED!
fi
}

# - moodle
function test_moodle() {
echo -n "[XSCE] Test schoolserver moodle access..."
if `curl -Is http://schoolserver/moodle/ | grep -is "moodle/login" > /dev/null`
then
      log moodle OK
    green OK
    else
      log moodle FAILED
    red FAILED!
fi
}
function test_activity_server() {
echo -n "[XSCE] Test schoolserver moodle access..."
if `curl -Is http://schoolserver/activities/ | grep -is "HTTP/1.1 200 OK" > /dev/null`
then
      log activity_server OK
    green OK
    else
      log activity_seerver FAILED
    red FAILED!
fi
}

function test_pathagar() {
echo -n "[XSCE] Test Pathagar..."
if `curl -Is http://schoolserver/books/ | grep -is "HTTP/1.1 200 OK" > /dev/null`
then
      log pathagar OK
    green OK
    else
      log pathagar FAILED
    red FAILED!
fi
}

function test_kalite() {
echo -n "[XSCE] Test Kalite..."
if `curl -Is http://schoolserver:8008 | grep -is "HTTP/1.1 200 OK" > /dev/null`
then
      log kalite OK
    green OK
    else
      log kalite FAILED
    red FAILED!
fi
}

function test_kiwix() {
echo -n "[XSCE] Test Kiwix..."
if `curl -Is http://schoolserver:3000 | grep -is "HTTP/1.1 200 OK" > /dev/null`
then
      log kiwix OK
    green OK
    else
      log kiwix FAILED
    red FAILED!
fi
}


function test_elgg() {
echo -n "[XSCE] Test elgg..."
if `curl -Is http://schoolserver/elgg/ | grep -is "HTTP/1.1 200 OK" > /dev/null`
then
      log elgg OK
    green OK
    else
      log elgg FAILED
    red FAILED!
fi
}

function test_owncloud() {
echo -n "[XSCE] Test owncloud..."
if `curl -Is http://schoolserver/owncloud/ | grep -is "HTTP/1.1 200 OK" > /dev/null`
then
      log owncloud OK
    green OK
    else
      log owncloud FAILED
    red FAILED!
fi
}

# - ds-backup
function test_backup() {
echo -n "[XSCE] Test backup..."
su - olpc -c "python /home/olpc/testing/idmgr-test.py >/home/olpc/testing/backup-test.result"
rc=`cat /home/olpc/testing/backup-test.result`

if [ "$rc" == "OK" ]
then
      log backup OK
    green OK
    else
      log backup FAILED
    red FAILED!
fi
}

# - ejabberd
function test_ejabberd() {
echo -n "[XSCE] Test ejabberd running..."

if `curl -Is http://schoolserver:5280/admin | grep -is 'realm="ejabberd"' > /dev/null`
then
      log ejabberd OK
    green OK
    else
      log ejabberd FAILED
    red FAILED!
fi
}

# Samba
function test_samba(){
  mkdir -p /tmp/smb
  if  mount -t cifs //schoolserver/public -U smbuser -p smbuser /tmp/smb; then
    echo "this is a test" > /tmp/smb/test
    stored=`cat /tmp/smb/test`
    if [ "$stored" == "this is a test" ]; then
      rm /tmp/smb/test
      umount /tmp/smb
      log samba OK
      green OK
      else
      log samba FAILED
      red FAILED!
    fi
  else
      log samba FAILED
      red FAILED!
  fi
  rmdir /tmp/smb
}



# munin

function test_munin() {
echo -n "[XSCE] Test munin access..."
if `curl -Is http://schoolserver/munin  | grep -is 'realm="Munin"' > /dev/null`
then
      log munin OK
    green OK
    else
      log munin FAILED
    red FAILED!
fi
}

# ajenti

function test_ajenti() {
echo -n "[XSCE] Test ajenti access..."
if `curl -Is http://schoolserver:9990 | grep -is "HTTP/1.1 200 OK" > /dev/null`
then
      log ajenti OK
    green OK
    else
      log ajenti FAILED
    red FAILED!
fi
}

# xovis

function test_xovis() {
echo -n "[XSCE] Test xovis access..."
if `curl -Is http://schoolserver:5984/xovis/_design/xovis-couchapp/index.html | grep -is "HTTP/1.1 200 OK" > /dev/null`
then
      log xovis OK
    green OK
    else
      log xovis FAILED
    red FAILED!
fi
}

function test_server_prep() {
echo -n "[XSCE] Test server prep..."
if `curl -Is http://schoolserver/content/xsce.ini | grep -is "HTTP/1.1 200 OK" > /dev/null`
then
      log ini OK
    green OK
    else
      log ini FAILED
    red FAILED!
fi
}

function iiab_presence() {
echo -n "[IIAB] Test main iiab page..."
if `curl -Is http://schoolserver/iiab/ | grep -is "HTTP/1.1 200 OK" > /dev/null`
then
      log iiab OK
    green OK
    else
      log iiab FAILED
    red FAILED!
fi

echo -n "[IIAB] Test wikipedia page..."
if `curl -Is http://schoolserver/iiab/zim/wikipedia_gn_all_01_2013/A/Pirane.html | grep -is "HTTP/1.1 200 OK" > /dev/null`
then
      log iiab_wikipedia OK
    green OK
    else
      log iiab_wikipedia FAILED
    red FAILED!
fi

echo -n "[IIAB] Test khan akademy video..."
if `curl -Is http://schoolserver/iiab/video/khanvideo/1/1/2/3.webm | grep -is "HTTP/1.1 200 OK" > /dev/null`
then
      log iiab_khan OK
    green OK
    else
      log iiab_khan FAILED
    red FAILED!
fi

echo -n "[IIAB] Test map link..."
if `curl -Is http://schoolserver/iiab/maps/tile/6/31/29.png | grep -is "HTTP/1.1 200 OK" > /dev/null`
then
      log iiab_map OK
    green OK
    else
      log iiab_map FAILED
    red FAILED!
fi

echo -n "[IIAB] Test book search..."
if `curl -Is http://schoolserver/iiab/books/search?q=moby+dick | grep -is "HTTP/1.1 200 OK" > /dev/null`
then
      log iiab_search OK
    green OK
    else
      log iiab_search FAILED
    red FAILED!
fi

echo -n "[IIAB] Test book download..."
if `curl -Is http://schoolserver/iiab/books/epub/2701.epub | grep -is "HTTP/1.1 200 OK" > /dev/null`
then
      log iiab_book OK
    green OK
    else
      log iiab_book FAILED
    red FAILED!
fi

}

# Main

echo
echo "Starting Tests in $testmode mode on XO model $XO_VERSION"

# Do the following regardless of testmode
test_httpd
test_moodle
test_munin
test_ajenti
test_ejabberd
test_xovis
test_activity_server
test_kalite
test_owncloud
test_elgg
test_pathagar
test_kiwix
test_samba

#if [ "$testmode" == "appliance" ]; then
#fi

if [ "$testmode" == "lan-controller" -o "$testmode" == "gateway" ]; then
  ip_range
  test_dns
fi

if [ "$testmode" == "gateway" ]; then
  test_external_dns
  test_dansguardian
  test_squid_cache
fi

if [ "$XO_VERSION" != "none" ];then
  test_idmgr
  test_registration
  test_backup
fi

echo
echo "IIAB Tests"
iiab_presence
